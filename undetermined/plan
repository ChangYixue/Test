一、自定义mark标记：
1. 使用mark标记来形成测试集，可针对单个测试用例，或者单个功能模块（类）
2. 用'-m=A or B'命令，运行包含A和B标记的所有测试用例
二、断言放在配置文件中：
1. 若一条用例运行单个接口，则针对接口的返回值，设置两个预期结果
2. 若一条用例运行多个接口，则针对多个接口返回值的相同的值，设置两个预期结果

二、优化脚本：
》处理动态数据，比如：添加地址后，根据地址的id删除地址
》标记为skip，且reason="缺乏测试数据"的用例的解决办法
》所有其他skip的用例的优化
》总结各种接口的类型
》总结各种接口测试的方法

三、难点：
1. pytest的断言里，不能添加python的异常处理，不然无法判断断言的结果了；考虑用pytest.raises()处理异常？？？
2. pytest版本过高，无法识别allure插件，需要降低pytest版本
3. 无法使用pytest自带的多线程或多进程来运行测试用例

四、接口自动化测试框架流程说明：
1. 环境：Python3+Request+Pytest
2. 配置文件的存放：
  1）使用yml格式文件存放接口的信息，比如请求方法（get/post）、url、headers、data
  2）再添加上接口名称、备注、预期值（用来做测试用例中的断言）等
  3）存放token值，取自登录接口的响应体中的某字段的值，方便其他接口调用
  4）存放其他类似于token的值，比如A调用B接口的某返回值，那么就可以把B接口中的值存起来
3. 接口请求和获取接口信息的封装：
  1）把获取"请求方法（get/post）、url、headers、data"等均封装成一个一个的函数，并把"接口名称"作为函数的参数
  2）封装写入和读取token的方法
  3）封装接口requests的get和post请求方法（每个接口都需要单独调试通过）
4. 编写测试用例：
  1）使用Pytest管理用例，每个接口添加断言
  2）使用conftest.py文件执行登录接口，所有用例执行前需要先执行登录接口
5. 测试报告：
  1）用pytest-html插件生成测试报告
  2）把测试报告发送至邮箱
6. 添加日志和异常处理机制
  1）添加日志配置文件，记录必要的脚本执行中的过程
  2）每个函数或方法中添加try/except语句，进行异常处理